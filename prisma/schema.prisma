// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  CUSTOMER
  ADMIN
}

model User {
  id         String   @id @db.Uuid @default(dbgenerated("gen_random_uuid()"))
  name       String   @db.VarChar(200)
  username   String   @db.VarChar(100) @unique
  email      String   @db.VarChar(150) @unique
  password   String   @db.VarChar(255) @map("password")
  role       Role     @default(CUSTOMER)
  isActive   Boolean  @default(true) @map("is_active")
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt  DateTime @updatedAt @map("updated_at") @db.Timestamptz
  deleted_at DateTime? @db.Timestamptz 

  @@map("users")
}

model Author {
  id          String    @id @db.Uuid @default(dbgenerated("gen_random_uuid()"))
  slug        String    @db.VarChar(220) @unique
  name        String    @db.VarChar(200)
  bio         String?   @db.Text()
  created_at  DateTime  @default(now()) @db.Timestamptz
  updated_at  DateTime?   @db.Timestamptz
  deleted_at  DateTime? @db.Timestamptz 

  book_authors BookAuthor[]

  @@map("authors")
}

model Category {
  id          String    @id @db.Uuid @default(dbgenerated("gen_random_uuid()"))
  slug        String    @db.VarChar(220) @unique
  name        String    @db.VarChar(200)
  description String?   @db.Text()
  created_at  DateTime  @default(now()) @db.Timestamptz
  updated_at  DateTime  @default(now()) @db.Timestamptz
  deleted_at  DateTime? @db.Timestamptz 

  book_categories BookCategory[]

  @@map("categories")
}

model Book {
  id           String    @id @db.Uuid @default(dbgenerated("gen_random_uuid()"))
  slug         String    @db.VarChar(220) @unique
  isbn         String?   @unique
  title        String    @db.VarChar(200)
  description  String?   @db.Text
  price        Decimal   @db.Decimal(12, 2)
  pages        Int?   
  language     String?   @db.VarChar(100)
  publisher    String?   @db.VarChar(150)
  published_at DateTime? @db.Date
  stock_cached Int       @default(0)
  created_at   DateTime  @default(now()) @db.Timestamptz
  updated_at   DateTime? @db.Timestamptz
  deleted_at   DateTime? @db.Timestamptz 

  book_authors    BookAuthor[]
  book_categories BookCategory[]

  @@map("books")
}


model BookAuthor {
  id           String @id @db.Uuid @default(dbgenerated("gen_random_uuid()"))
  book_id      String @db.Uuid
  author_id    String @db.Uuid
  ord          Int?
  created_at   DateTime  @default(now()) @db.Timestamptz
  updated_at   DateTime? @db.Timestamptz

  // relations
  book   Book   @relation(fields: [book_id], references: [id])
  author Author @relation(fields: [author_id], references: [id])

  @@unique([book_id, author_id])
  @@map("book_authors")
}

model BookCategory {
  id          String    @id @db.Uuid @default(dbgenerated("gen_random_uuid()"))
  book_id     String    @db.Uuid
  category_id String    @db.Uuid
  created_at  DateTime  @default(now()) @db.Timestamptz
  updated_at  DateTime? @db.Timestamptz

  book     Book      @relation(fields: [book_id], references: [id])
  category Category @relation(fields: [category_id], references: [id])

  @@unique([book_id, category_id])
  @@map("book_categories")
}