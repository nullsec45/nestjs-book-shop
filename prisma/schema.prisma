// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  CUSTOMER
  ADMIN
}

model User {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name       String    @db.VarChar(200)
  username   String    @unique @db.VarChar(100)
  email      String    @unique @db.VarChar(150)
  password   String    @map("password") @db.VarChar(255)
  role       Role      @default(CUSTOMER)
  is_active   Boolean  @default(true) 
  created_at DateTime  @default(now()) @db.Timestamptz
  updated_at DateTime  @updatedAt @db.Timestamptz
  deleted_at DateTime? @db.Timestamptz

  addresses Address[]
  carts     Cart[]

  @@map("users")
}

model Author {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  slug       String    @unique @db.VarChar(220)
  name       String    @db.VarChar(200)
  bio        String?   @db.Text()
  created_at DateTime  @default(now()) @db.Timestamptz
  updated_at DateTime? @db.Timestamptz
  deleted_at DateTime? @db.Timestamptz

  book_authors BookAuthor[]

  @@map("authors")
}

model Category {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  slug        String    @unique @db.VarChar(220)
  name        String    @db.VarChar(200)
  description String?   @db.Text()
  created_at  DateTime  @default(now()) @db.Timestamptz
  updated_at  DateTime  @default(now()) @db.Timestamptz
  deleted_at  DateTime? @db.Timestamptz

  book_categories BookCategory[]

  @@map("categories")
}

model Book {
  id           String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  slug         String    @db.VarChar(220)
  isbn         String?
  title        String    @db.VarChar(200)
  description  String?   @db.Text
  price        Decimal   @db.Decimal(12, 2)
  pages        Int?
  language     String?   @db.VarChar(100)
  publisher    String?   @db.VarChar(150)
  published_at DateTime? @db.Date
  stock_cached Int       @default(0)
  created_at   DateTime  @default(now()) @db.Timestamptz
  updated_at   DateTime? @db.Timestamptz
  deleted_at   DateTime? @db.Timestamptz

  book_authors    BookAuthor[]
  book_categories BookCategory[]
  cartItems        CartItem[]

  @@map("books")
}

model BookAuthor {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  book_id    String    @db.Uuid
  author_id  String    @db.Uuid
  ord        Int?
  created_at DateTime  @default(now()) @db.Timestamptz
  updated_at DateTime? @db.Timestamptz

  // relations
  book   Book   @relation(fields: [book_id], references: [id])
  author Author @relation(fields: [author_id], references: [id])

  @@unique([book_id, author_id])
  @@map("book_authors")
}

model BookCategory {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  book_id     String    @db.Uuid
  category_id String    @db.Uuid
  created_at  DateTime  @default(now()) @db.Timestamptz
  updated_at  DateTime? @db.Timestamptz

  book     Book     @relation(fields: [book_id], references: [id])
  category Category @relation(fields: [category_id], references: [id])

  @@unique([book_id, category_id])
  @@map("book_categories")
}

model Address {
  id             String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id        String  @db.Uuid
  label          String  @db.VarChar(200)
  recipient_name String  @db.VarChar(200)
  phone          String  @db.VarChar(25)
  line           String  @db.Text
  city           String  @db.VarChar(200)
  province       String  @db.VarChar(200)
  is_default     Boolean @default(false)

  created_at DateTime  @default(now()) @db.Timestamptz
  updated_at DateTime? @db.Timestamptz

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("addresses")
}

model Cart {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id    String   @db.Uuid
  is_active  Boolean  @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user   User       @relation(fields: [user_id], references: [id], onDelete: Cascade)
  items  CartItem[]

  @@index([user_id])
  @@map("carts")
}

model CartItem {
  id             String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  cart_id        String   @db.Uuid
  book_id        String   @db.Uuid
  qty            Int
  price_snapshot Decimal  @db.Decimal(12, 2)
  added_at       DateTime @default(now())
  note           String?  @db.Text

  // relations
  cart Cart @relation(fields: [cart_id], references: [id], onDelete: Cascade)
  book Book @relation(fields: [book_id], references: [id])

  // Satu buku unik per cart
  @@unique([cart_id, book_id])
  @@map("cart_items")
}